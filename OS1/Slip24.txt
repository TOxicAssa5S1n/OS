Slip24
1)
#include<stdio.h>
#include<sys/types.h>
#include<unistd.h>
#include<stdlib.h>

void bubblesort(int arr[30], int n)
{
    int i, j, temp;
    for(i=0; i<n; i++)
    {
        for(j=0; j<n-1; j++)
        {
            if(arr[j]>arr[j+1])
            {
                temp=arr[j];
                arr[j]=arr[j+1];
                arr[j+1]=temp;
            }
        }
    }
}

void insertionsort(int arr[30], int n)
{
    int i, j, temp;
    for(i=1; i<n; i++)
    {
        temp=arr[i];
        j=i-1;
        while(j>=0 && temp<=arr[j])
        {
            arr[j+1]==arr[j];
            j=j-1;
        }
        arr[j+1]=temp;
    }
}

void main()
{
    int arr[25], arr[25], n, i, status;
    printf("\nEnter the number of values in array:");
    scanf("%d",&n);
    printf("\nEnter the array elements:");
    for(i=0; i<n; i++)
        scanf("%d",&arr[i]);
    int pid=fork();
    if(pid==0)
    {
        sleep(2);
        printf("\nchild process\n");
        printf("child process id=%d\n",getpid());
        insertionsort(arr, n);
        printf("\nElements sorted using insertionsort:");
        printf("\n");
        for(i=0; i<n; i++)
            printf("%d",&arr[i]);
        printf("\b");
        printf("\nparent process id=%d\n",getppid());
    }
    else
    {
        printf("\nparent process\n");
        printf("parent process id=%d\n",getpid());
        bubblesort(arr, n);
        printf("Elements sorted using bubblesort:");
        printf("\n");
        for(j=0; j<n; j++)
            printf("%d",&arr[j]);
        printf("\n\n\n");
    }
}

2)
#include <stdio.h>
#include <string.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <dirent.h>
//#include <bfd.h>
char comm[100],*ptr;
char *args[10];
int tot_arg;

int count( char option, char *fname);

main()
{
	do
	{
		printf("myshell $ ");
		getcomm();
		sep_arg();
		take_action();
	}while(1);
} // main

sep_arg()
{
	int i,j;
	i = j = tot_arg = 0;

	args[tot_arg] = (char*)malloc(sizeof(char) * 20);
	for(i=0; comm[i] !='\0' ; i++)
	{
		if( comm[i] == ' ')
		{
			args[tot_arg][j] = '\0';
			tot_arg++;
			args[tot_arg] = (char*)malloc(sizeof(char) * 20);	
			j=0;
		}
		else
		{
			args[tot_arg][j] =comm[i];
			j++;
		}
	} // while
	args[tot_arg][j] = '\0'; // complete last word
 	return;
}

getcomm()
{
	int len;
	ptr = fgets(comm,80,stdin);
	len = strlen(comm);
	comm[len-1] = '\0';
	return;
} // getcomm

take_action()
{
	char str[100];
	pid_t   pid;
	int status;

	if(strcmp(args[0],"count") == 0 )
		count(*args[1],args[2]);
	else
	{	
		if( ptr == NULL )
			exit(0);
		if ( strlen(comm) <= 1 )
			return;
		if( ( pid = fork() ) < 0 )
		{
			printf("\nUnable to create process");
		}
		else
		if(  pid == 0 ) // child
		{   sscanf(comm,"%s",comm);
			execvp(comm,args);
			strcpy(str,"./");
			strcat(str,args[0]);
			execvp(str,args);
			printf("\n%s : command not found",comm);
			exit(0);
		}
		else //parent
		 waitpid(pid,&status,0);
	} // else	
}// take action

int count( char option, char *fname)// count c/w/l   <filename>
{
	int ccnt,wcnt,lcnt,wflag;
	int ch;
	FILE *fp;
	int i;
	fp= fopen(fname,"r");
	if( fp == NULL )
	{
		printf("\nUnable to open file");
		exit(0);
	}
	ccnt =wcnt = lcnt = 0;
	wflag=1;
	ch = fgetc(fp);
	while ( ch != EOF)
	{
		ccnt++;
		if( ch ==' ' || ch== '\t')
		{
			if( wflag == 0 )
			{
				wcnt++;
				wflag = 1;
			}	
		}
		else
		if( ch == '\n')
		{
			lcnt++;
			if( wflag == 0 )
			{
				wcnt++;	
				wflag = 1;
			}
		}
		else
		{
			wflag = 0;
		}
		ch = fgetc(fp);
	}//while
	if( wflag == 0 )
	{	
		wcnt++;
		lcnt++;
	}
	fclose(fp);
	switch(option)
	{
	case 'c' : // print all chars 
			printf("\nTot chars = %d\n",ccnt);
			break;
	case 'w' : // print all words 
			printf("\nTot words = %d\n",wcnt);
			break;
	case 'l' : // print all lines 
			printf("\nTot lines = %d\n",lcnt);
			break;
	} // switch
	return;
}// count