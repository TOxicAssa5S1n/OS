Slip15
1)
#include <stdio.h>
#include <string.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <dirent.h>
//#include <bfd.h>
char comm[100],*ptr;
char *args[10];
int tot_arg;

int list( char option, char dirname[]);

main()
{
	do
	{
		printf("myshell $ ");
		getcomm();
		sep_arg();
		take_action();
	}while(1);
} // main

sep_arg()
{
	int i,j;
	i = j = tot_arg = 0;

	args[tot_arg] = (char*)malloc(sizeof(char) * 20);
	for(i=0; comm[i] !='\0' ; i++)
	{
		if( comm[i] == ' ')
		{
			args[tot_arg][j] = '\0';
			tot_arg++;
			args[tot_arg] = (char*)malloc(sizeof(char) * 20);	
			j=0;
		}
		else
		{
			args[tot_arg][j] =comm[i];
			j++;
		}
	} // while
	args[tot_arg][j] = '\0'; // complete last word
 	return;
}

getcomm()
{
	int len;
	ptr = fgets(comm,80,stdin);
	len = strlen(comm);
	comm[len-1] = '\0';
	return;
} // getcomm

take_action()
{
	char str[100];
	pid_t   pid;
	int status;

	if(strcmp(args[0],"list") == 0 )
		list(*args[1],args[2]);
	else
	{	
		if( ptr == NULL )
			exit(0);
		if ( strlen(comm) <= 1 )
			return;
		if( ( pid = fork() ) < 0 )
		{
			printf("\nUnable to create process");
		}
		else
		if(  pid == 0 ) // child
		{   sscanf(comm,"%s",comm);
			execvp(comm,args);
			strcpy(str,"./");
			strcat(str,args[0]);
			execvp(str,args);
			printf("\n%s : command not found",comm);
			exit(0);
		}
		else //parent
		 waitpid(pid,&status,0);
	} // else
}// take action

int list( char option, char dirname[])
{
	DIR *dp;
	struct dirent *dent;
	struct stat buff;
	char orgdir[100];
	int cnt,reply;
	getcwd(orgdir,90);
	chdir(dirname);
	switch(option)
	{
	    case 'f' : // list all dir entries
			dp= opendir(".");
			if( dp == NULL )
			{
				printf("\nUnable to open dir");
				exit(0);
			}
			dent = readdir(dp);
			while( dent != NULL )
			{
				printf("\n%s",dent->d_name);
				dent= readdir(dp);
			}
			printf("\n");
			break;
	
	    default :	printf("\nInvalid option");
			exit(0);
	} // switch
	chdir(orgdir);
	return(0);
}// main

2)
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

struct process_info
{
    int atime;
    int cpub;
}proc[10];

struct gantt_chart
{
    int procno;
    int stime;
    int etime;
}gchart[30];

int i, n, currtime=0, gindex,p, ttime[10], wtime[10], prevp=-1;
void get_process_input();
find_proc_toexec();
void print_gantt_chart();
finished_procs();
void print_times();
void gen_next_cpub();
void cpub_exec_proc(int p);

void main()
{
  int etime;

  get_process_input();
  while (!finished_procs())
  {
    p=find_proc_toexec();
    if (p!=-1)
      cpub_exec_proc(p);
    else
      currtime++;
  }
  gchart[gindex++].etime=currtime;
  printf("After Excecution of First CPU burst:\n");
  print_gantt_chart();
  print_times();
  // getch();
  gen_next_cpub();
  prevp=-1;
  while(!finished_procs())
  {
    p=find_proc_toexec();
    if(p!=-1)
      cpub_exec_proc(p);
    else
      currtime++;
  }
  gchart[gindex++].etime=currtime;
  printf("\nAfter Excecution of Next CPU burst:\n");
  print_gantt_chart();
  print_times();
  //getch();
}

void get_process_input()
{
  int pno;
  printf("\nHow many processes : ");
  scanf("%d",&n);
  printf("Proc   Arrival   First CPU   \n");
  printf("No.    Time      Burst        \n");
  pno=0;
  for(i=0; i<n; i++)
  {
    printf("\nP%d",pno++);
    scanf("%d%d",&proc[i].atime,&proc[i].cpub);
  }
}

find_proc_toexec()
{
  int mincpub=11, selproc=-1;
  for (i=0; i<n; i++)
  {
    if(proc[i].cpub!=0 && proc[i].atime<=currtime && proc[i].cpub<mincpub)
    {
      mincpub=proc[i].cpub;
      selproc=i;
    }
  }
  return selproc;
}

void cpub_exec_proc(int p)
{
  if(prevp!=p)
  {
    if(prevp!=-1) gchart[gindex++].etime=currtime;
      wtime[p]+=(currtime-getetime(p));
    gchart[gindex].procno=p;
    gchart[gindex].stime=currtime;
    prevp=p;
  }
  currtime++;
  proc[p].cpub-=1;
  ttime[p]=ttime[p]+1;
  if(proc[p].cpub==0)
  {
    proc[p].atime=currtime+2;
    ttime[p]+=wtime[p];
  }
}

finished_procs()
{
  for(i=0; i<n; i++)
    if(proc[i].cpub!=0)
      return (0);
  return (1);
}

void gen_next_cpub()
{
  random();
  printf("\n");
  printf("\nProc.No.\tNext CPU Burst");
  for(i=0; i<n; i++)
  {
    proc[i].cpub=random()%10;
    printf("\nP%d\t%d",i,proc[i].cpub);
  }
}

getetime(int p)
{
  for(i=gindex-1; i>0; i--)
    if (gchart[i].procno==p)
      return(gchart[i].etime);
  return proc[p].atime;
}

void print_gantt_chart()
{
  printf("\n|----|----|----|----|----|----|----|----|----------\n");
  printf("|");
  for(i=0; i<gindex; i++)
    printf(" %d  |",gchart[i].procno);
  printf("\n|----|----|----|----|----|----|----|----|------------\n");
  printf("%d",gchart[0].stime);
  for(i=0; i<gindex; i++)
    printf("%5d",gchart[i].etime);
}

void print_times()
{
  int totwtime=0,totttime=0;
  printf("\nProc   Waiting   TurnAround\n");
  printf("No.    Time      Time       \n");
  for(i=0; i<n; i++)
  {
    printf("%d\t%d\t%d\n",i,wtime[i],ttime[i]);
    totwtime+=wtime[i];
    totttime+=ttime[i];
  }
  printf("\nAverage Waiting Time = %.2f",(float)totwtime/n);
  printf("\nAverage Turnaround Time = %.2f",(float)totttime/n);
}